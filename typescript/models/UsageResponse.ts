/* tslint:disable */
/* eslint-disable */
/**
 * Account API
 * With the Account service you can manage your API keys and track their usage. It is important to note that unlike all other APIs, the Account API needs a master API key for authentication. For more details consult the [concept](./concepts/api-key-management-and-usage).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApiKeyUsage } from './ApiKeyUsage';
import {
    ApiKeyUsageFromJSON,
    ApiKeyUsageFromJSONTyped,
    ApiKeyUsageToJSON,
} from './ApiKeyUsage';
import type { BillingPeriod } from './BillingPeriod';
import {
    BillingPeriodFromJSON,
    BillingPeriodFromJSONTyped,
    BillingPeriodToJSON,
} from './BillingPeriod';
import type { TotalUsage } from './TotalUsage';
import {
    TotalUsageFromJSON,
    TotalUsageFromJSONTyped,
    TotalUsageToJSON,
} from './TotalUsage';

/**
 * 
 * @export
 * @interface UsageResponse
 */
export interface UsageResponse {
    /**
     * This list contains the usage by API key. Only API keys which have been used in the requested period will be returned.
     * @type {Array<ApiKeyUsage>}
     * @memberof UsageResponse
     */
    apiKeys?: Array<ApiKeyUsage>;
    /**
     * 
     * @type {TotalUsage}
     * @memberof UsageResponse
     */
    total?: TotalUsage;
    /**
     * All billing periods.
     * @type {Array<BillingPeriod>}
     * @memberof UsageResponse
     */
    billingPeriods?: Array<BillingPeriod>;
}

/**
 * Check if a given object implements the UsageResponse interface.
 */
export function instanceOfUsageResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UsageResponseFromJSON(json: any): UsageResponse {
    return UsageResponseFromJSONTyped(json, false);
}

export function UsageResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UsageResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'apiKeys': !exists(json, 'apiKeys') ? undefined : ((json['apiKeys'] as Array<any>).map(ApiKeyUsageFromJSON)),
        'total': !exists(json, 'total') ? undefined : TotalUsageFromJSON(json['total']),
        'billingPeriods': !exists(json, 'billingPeriods') ? undefined : ((json['billingPeriods'] as Array<any>).map(BillingPeriodFromJSON)),
    };
}

export function UsageResponseToJSON(value?: UsageResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'apiKeys': value.apiKeys === undefined ? undefined : ((value.apiKeys as Array<any>).map(ApiKeyUsageToJSON)),
        'total': TotalUsageToJSON(value.total),
        'billingPeriods': value.billingPeriods === undefined ? undefined : ((value.billingPeriods as Array<any>).map(BillingPeriodToJSON)),
    };
}

