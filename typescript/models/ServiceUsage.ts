/* tslint:disable */
/* eslint-disable */
/**
 * Account API
 * With the Account service you can manage your API keys and track their usage. It is important to note that unlike all other APIs, the Account API needs a master API key for authentication. For more details consult the [concept](./concepts/api-key-management-and-usage).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UsageByDay } from './UsageByDay';
import {
    UsageByDayFromJSON,
    UsageByDayFromJSONTyped,
    UsageByDayToJSON,
} from './UsageByDay';

/**
 * 
 * @export
 * @interface ServiceUsage
 */
export interface ServiceUsage {
    /**
     * The name of the service.
     * @type {string}
     * @memberof ServiceUsage
     */
    name?: string;
    /**
     * This list contains the usage by day. Only days on which the usage is non-zero will be returned.
     * @type {Array<UsageByDay>}
     * @memberof ServiceUsage
     */
    days?: Array<UsageByDay>;
}

/**
 * Check if a given object implements the ServiceUsage interface.
 */
export function instanceOfServiceUsage(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ServiceUsageFromJSON(json: any): ServiceUsage {
    return ServiceUsageFromJSONTyped(json, false);
}

export function ServiceUsageFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServiceUsage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'days': !exists(json, 'days') ? undefined : ((json['days'] as Array<any>).map(UsageByDayFromJSON)),
    };
}

export function ServiceUsageToJSON(value?: ServiceUsage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'days': value.days === undefined ? undefined : ((value.days as Array<any>).map(UsageByDayToJSON)),
    };
}

