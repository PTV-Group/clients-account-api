/*
 * Account API
 *
 * With the Account service you can manage your API keys and track their usage. It is important to note that unlike all other APIs, the Account API needs a master API key for authentication. For more details consult the [concept](./concepts/api-key-management-and-usage).
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.account.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.account.Model
{
    /// <summary>
    /// UsageResponse
    /// </summary>
    [DataContract(Name = "UsageResponse")]
    public partial class UsageResponse : IEquatable<UsageResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsageResponse" /> class.
        /// </summary>
        /// <param name="apiKeys">This list contains the usage by API key. Only API keys which have been used in the requested period will be returned..</param>
        /// <param name="total">total.</param>
        /// <param name="billingPeriods">All billing periods..</param>
        public UsageResponse(List<ApiKeyUsage> apiKeys = default(List<ApiKeyUsage>), TotalUsage total = default(TotalUsage), List<BillingPeriod> billingPeriods = default(List<BillingPeriod>))
        {
            this.ApiKeys = apiKeys;
            this.Total = total;
            this.BillingPeriods = billingPeriods;
        }

        /// <summary>
        /// This list contains the usage by API key. Only API keys which have been used in the requested period will be returned.
        /// </summary>
        /// <value>This list contains the usage by API key. Only API keys which have been used in the requested period will be returned.</value>
        [DataMember(Name = "apiKeys", EmitDefaultValue = false)]
        public List<ApiKeyUsage> ApiKeys { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public TotalUsage Total { get; set; }

        /// <summary>
        /// All billing periods.
        /// </summary>
        /// <value>All billing periods.</value>
        [DataMember(Name = "billingPeriods", EmitDefaultValue = false)]
        public List<BillingPeriod> BillingPeriods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UsageResponse {\n");
            sb.Append("  ApiKeys: ").Append(ApiKeys).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  BillingPeriods: ").Append(BillingPeriods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsageResponse);
        }

        /// <summary>
        /// Returns true if UsageResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of UsageResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsageResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApiKeys == input.ApiKeys ||
                    this.ApiKeys != null &&
                    input.ApiKeys != null &&
                    this.ApiKeys.SequenceEqual(input.ApiKeys)
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.BillingPeriods == input.BillingPeriods ||
                    this.BillingPeriods != null &&
                    input.BillingPeriods != null &&
                    this.BillingPeriods.SequenceEqual(input.BillingPeriods)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiKeys != null)
                {
                    hashCode = (hashCode * 59) + this.ApiKeys.GetHashCode();
                }
                if (this.Total != null)
                {
                    hashCode = (hashCode * 59) + this.Total.GetHashCode();
                }
                if (this.BillingPeriods != null)
                {
                    hashCode = (hashCode * 59) + this.BillingPeriods.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
